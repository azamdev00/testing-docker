name: Build and Deploy to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 920108834017
  ECS_CLUSTER: cluster1
  ECS_SERVICE: node-app-service
  ECS_TASK_DEFINITION: node-app-definition
  ECS_CONTAINER: node-app-container
  ECR_REPOSITORY: node-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build Docker image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECS_CONTAINER }}:latest
      
      - name: Build and tag Docker image
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker image to Amazon ECR
        if: success() && steps.build-image.outputs.pushed == 'true'
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_NAME: ${{ env.ECR_REPOSITORY }}
        run: |
          docker tag ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest $ECR_REGISTRY/$IMAGE_NAME:$GITHUB_SHA
          docker push $ECR_REGISTRY/$IMAGE_NAME:$GITHUB_SHA

      - name: Register new task definition revision
        id: register-task-definition
        run: |
          # Get the latest task definition JSON
          task_definition=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }})

          # Update the image to use the newly built Docker image
          task_definition=$(echo $task_definition | jq --arg image ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECS_CONTAINER }}:latest '.taskDefinition.containerDefinitions[0].image = $image')

          # Register the new task definition revision
          task_definition_arn=$(echo $task_definition | jq -r '.taskDefinition.taskDefinitionArn')
          task_definition=$(echo $task_definition | jq '.taskDefinition | del(.taskDefinitionArn)')

          new_task_definition=$(aws ecs register-task-definition --cli-input-json "$task_definition")

          # Get the new task definition revision number
          revision=$(echo $new_task_definition | jq -r '.taskDefinition.revision')

          # Set the output variable for the new task definition ARN
          echo "::set-output name=task-definition-arn::$task_definition_arn:$revision"

      - name: Update ECS service
        run: |
          task_definition_arn=$(echo ${{ steps.register-task-definition.outputs.task-definition-arn }})

          # Update the ECS service to use the new task definition revision
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --task-definition $task_definition_arn